---
version: '3'

dotenv: [.env]

env:
    MODULE: '{{.TG_MODULE}}'

includes:
    common:
        taskfile: ./DevEx/taskfile/Taskfile.common.yml

    terragrunt:
        taskfile: ./DevEx/taskfile/Taskfile.terragrunt.yml
        dir: ./examples/infra/terragrunt

tasks:
  #-----------------------------------------------------------------------------------------
  # GENERIC TASKS
  #-----------------------------------------------------------------------------------------
    default:
        cmds:
            - task: common:default

    pre-commit-init:
        desc: Initialize and install required hooks
        cmds:
            - task: common:hooks-install

    pre-commit:
        desc: Run all the pre-configured pre-commit hooks.
        cmds:
            - task: common:hooks

  #-----------------------------------------------------------------------------------------
  # OPINIONATED TASKS
  #-----------------------------------------------------------------------------------------
    cli:
        desc: Run the CLI
        cmds:
            - |
              go mod tidy
              if [ -f "stiletto" ]; then rm stiletto; fi
              go build -o stiletto
            - ./stiletto {{.CLI_ARGS}}

    snapshot:
        cmds:
            - goreleaser check
            - goreleaser release --snapshot --rm-dist --skip-publish

    release:
        cmds:
            - goreleaser check
            - export GITHUB_TOKEN=${GITHUB_TOKEN} && goreleaser release --rm-dist

    tg-init:
        desc: Run Terragrunt Init on selected module
        cmds:
            - task: terragrunt:init
              vars: {TG_WORKING_DIR: '{{.TG_MODULE}}'}

    tg-plan:
        desc: Run Terragrunt Plan on selected module
        cmds:
            - task: terragrunt:plan
              vars: {TG_WORKING_DIR: '{{.TG_MODULE}}'}

    tg-plan-all:
        desc: Run Terragrunt Plan (all) on selected module
        cmds:
            - task: terragrunt:plan-all
              vars: {TG_WORKING_DIR: '{{.TG_MODULE}}'}

    tg-apply:
        desc: Run Terragrunt Apply on selected module
        cmds:
            - task: terragrunt:apply
              vars: {TG_WORKING_DIR: '{{.TG_MODULE}}'}

    tg-apply-all:
        desc: Run Terragrunt Apply (All) on selected module
        cmds:
            - task: terragrunt:apply-all
              vars: {TG_WORKING_DIR: '{{.TG_MODULE}}'}


    tg-destroy:
        desc: Run Terragrunt Destroy on selected module
        cmds:
            - task: terragrunt:destroy
              vars: {TG_WORKING_DIR: '{{.TG_MODULE}}'}

    tg-destroy-all:
        desc: Run Terragrunt Destroy (all) on selected module
        cmds:
            - task: terragrunt:destroy-all
              vars: {TG_WORKING_DIR: '{{.TG_MODULE}}'}


    pipeline-dagger-compile:
        desc: Compile the dagger pipeline, wrapping the CLI through TaskFile
        dir: pipeline/dagger
        cmds:
            - |
              go mod tidy
              if [ -f "pipeline-dagger" ]; then rm pipeline-dagger; fi
              go build -o pipeline-dagger
              if [ -f "../../pipeline-dagger" ]; then rm ../../pipeline-dagger; fi
              mv pipeline-dagger ../../pipeline-dagger

    pipeline-dagger-run:
        desc: Run the dagger pipeline, wrapping the CLI through TaskFile
        deps: [pipeline-dagger-compile]
        cmds:
            - ./pipeline-dagger {{.CLI_ARGS}}
